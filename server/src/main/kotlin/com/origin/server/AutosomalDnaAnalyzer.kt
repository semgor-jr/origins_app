package com.origin.server

import com.origin.server.data.AxiomWorldArrayService
import kotlinx.serialization.Serializable
import kotlin.math.pow

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∞—É—Ç–æ—Å–æ–º–Ω–æ–≥–æ –î–ù–ö —Ç–µ—Å—Ç–∞.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Ä–∫–µ—Ä—ã Affymetrix Axiom World Array –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è.
 */
class AutosomalDnaAnalyzer {

    private val axiomService = AxiomWorldArrayService()

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç VCF —Ñ–∞–π–ª –¥–ª—è –∞—É—Ç–æ—Å–æ–º–Ω–æ–≥–æ –î–ù–ö —Ç–µ—Å—Ç–∞.
     */
    suspend fun analyzeAutosomalDna(vcfBytes: ByteArray): List<OriginPortion> {
        try {
            println("–ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–æ—Å–æ–º–Ω—ã–π –î–ù–ö –∞–Ω–∞–ª–∏–∑...")
            println("–†–∞–∑–º–µ—Ä VCF —Ñ–∞–π–ª–∞: ${vcfBytes.size} bytes")

            val snpData = parseVcfFile(vcfBytes)
            val autosomalSNPs = filterAutosomalSNPs(snpData)
            val axiomMarkers = filterAxiomMarkers(autosomalSNPs)

            if (axiomMarkers.isEmpty()) {
                println("‚ö†–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ Axiom World Array, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.")
                return createFallbackDistribution()
            }

            println("‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ Axiom World Array: ${axiomMarkers.size}")
            
            if (axiomMarkers.isNotEmpty()) {
                println("üéØ –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ Axiom:")
                axiomMarkers.take(5).forEach { snp ->
                    println("    rsID: ${snp.rsId}, –•—Ä–æ–º–æ—Å–æ–º–∞: ${snp.chromosome}")
                }
            } else {
                println("‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä—ã Axiom World Array –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ VCF —Ñ–∞–π–ª–µ!")
                println("üìã –ü–µ—Ä–≤—ã–µ 10 rsID –∏–∑ VCF —Ñ–∞–π–ª–∞:")
                snpData.take(10).forEach { snp ->
                    println("    rsID: ${snp.rsId}, –•—Ä–æ–º–æ—Å–æ–º–∞: ${snp.chromosome}")
                }
            }

            val ancestryResults = analyzeAxiomMarkers(axiomMarkers)
            val results = normalizeResults(ancestryResults, axiomMarkers.size)

            printAutosomalDnaStatistics(ancestryResults, axiomMarkers.size)

            return results
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –≤ AutosomalDnaAnalyzer: ${e.message}")
            e.printStackTrace()
            return createFallbackDistribution()
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç VCF —Ñ–∞–π–ª.
     */
    private fun parseVcfFile(vcfBytes: ByteArray): List<AutosomalSNPData> {
        val text = vcfBytes.toString(Charsets.UTF_8)
        val snpData = mutableListOf<AutosomalSNPData>()

        var lineCount = 0
        val startTime = System.currentTimeMillis()

        text.lineSequence()
            .filter { it.isNotEmpty() && !it.startsWith("#") }
            .forEach { line ->
                lineCount++
                val columns = line.split('\t')
                if (columns.size < 10) return@forEach

                try {
                    val chromosome = columns[0]
                    val position = columns[1].toLong()
                    val rsId = columns[2]
                    val referenceAllele = columns[3]
                    val alternateAllele = columns[4]
                    val quality = when (columns[5]) {
                        ".", "", "0" -> 50.0
                        else -> columns[5].toDoubleOrNull() ?: 50.0
                    }

                    val formatFields = columns[8].split(':')
                    val sampleData = columns[9].split(':')

                    val genotype = if (formatFields.contains("GT") && sampleData.isNotEmpty()) {
                        sampleData[formatFields.indexOf("GT")]
                    } else "."

                    snpData.add(
                        AutosomalSNPData(
                            rsId = rsId,
                            chromosome = chromosome,
                            position = position,
                            referenceAllele = referenceAllele,
                            alternateAllele = alternateAllele,
                            quality = quality,
                            genotype = genotype
                        )
                    )

                    if (lineCount % 50000 == 0) {
                        val elapsed = System.currentTimeMillis() - startTime
                        val rate = lineCount * 1000.0 / elapsed
                        println("–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ $lineCount —Å—Ç—Ä–æ–∫... (${String.format("%.0f", rate)} —Å—Ç—Ä–æ–∫/—Å–µ–∫)")
                    }
                } catch (e: Exception) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                }
            }

        val totalTime = System.currentTimeMillis() - startTime
        val avgRate = lineCount * 1000.0 / totalTime
        println("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: $lineCount SNP –∑–∞ ${totalTime}–º—Å (${String.format("%.0f", avgRate)} —Å—Ç—Ä–æ–∫/—Å–µ–∫)")

        return snpData
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∞—É—Ç–æ—Å–æ–º–Ω—ã–µ SNP (—Ö—Ä–æ–º–æ—Å–æ–º—ã 1-22).
     */
    private fun filterAutosomalSNPs(snpData: List<AutosomalSNPData>): List<AutosomalSNPData> {
        val autosomalSNPs = snpData.filter { snp ->
            val chromosome = snp.chromosome
            chromosome.matches(Regex("^[1-9]$|^1[0-9]$|^2[0-2]$")) &&
            snp.rsId.isNotEmpty() &&
            snp.genotype.isNotEmpty() &&
            snp.genotype != "./." &&
            snp.genotype != "." &&
            snp.referenceAllele.isNotEmpty() &&
            snp.alternateAllele.isNotEmpty() &&
            snp.quality >= 0.0
        }

        println("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞—É—Ç–æ—Å–æ–º–Ω—ã—Ö SNP:")
        println("  –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${snpData.size}")
        println("  –ê—É—Ç–æ—Å–æ–º–Ω—ã—Ö SNP: ${autosomalSNPs.size}")

        return autosomalSNPs
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä—ã Axiom World Array.
     */
    private fun filterAxiomMarkers(autosomalSNPs: List<AutosomalSNPData>): List<AutosomalSNPData> {
        val axiomMarkers = autosomalSNPs.filter { snp ->
            axiomService.isAxiomMarker(snp.rsId)
        }

        println("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ Axiom World Array:")
        println("  –ê—É—Ç–æ—Å–æ–º–Ω—ã—Ö SNP: ${autosomalSNPs.size}")
        println("  –ú–∞—Ä–∫–µ—Ä–æ–≤ Axiom: ${axiomMarkers.size}")

        if (axiomMarkers.isNotEmpty()) {
            println("  –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ä–∫–µ—Ä–æ–≤ Axiom:")
            axiomMarkers.take(5).forEach { snp ->
                println("    rsID: ${snp.rsId}, –•—Ä–æ–º–æ—Å–æ–º–∞: ${snp.chromosome}, –ì–µ–Ω–æ—Ç–∏–ø: ${snp.genotype}")
            }
        }

        return axiomMarkers
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä–∫–µ—Ä—ã Axiom World Array.
     */
    private fun analyzeAxiomMarkers(axiomMarkers: List<AutosomalSNPData>): Map<String, AutosomalAncestryScore> {
        val ancestryScores = mutableMapOf<String, AutosomalAncestryScore>()

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        val regions = listOf("EUR", "EAS", "SAS", "AFR", "AMR")
        regions.forEach { region ->
            ancestryScores[region] = AutosomalAncestryScore(region, 0.0, 0, 0.0)
        }

        var processedCount = 0
        var matchedCount = 0
        val startTime = System.currentTimeMillis()

        axiomMarkers.forEach { snp ->
            processedCount++

            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–µ—Ä Axiom World Array
            val axiomMarker = axiomService.getAxiomMarker(snp.rsId)
            if (axiomMarker != null) {
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–æ—Ç–∏–ø —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç
                val scores = analyzeGenotypeWithAxiomFrequencies(snp.genotype, axiomMarker.populationFrequencies)
                scores.forEach { (region, score) ->
                    ancestryScores[region]?.let { current ->
                        ancestryScores[region] = AutosomalAncestryScore(
                            region,
                            current.totalScore + score,
                            current.snpCount + 1,
                            current.confidence + axiomMarker.quality
                        )
                    }
                }
                matchedCount++
            }

            if (processedCount % 1000 == 0) {
                val elapsed = System.currentTimeMillis() - startTime
                val rate = processedCount * 1000.0 / elapsed
                val matchRate = matchedCount * 100.0 / processedCount
                println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ $processedCount –º–∞—Ä–∫–µ—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: $matchedCount (${String.format("%.1f", matchRate)}%, ${String.format("%.0f", rate)} –º–∞—Ä–∫–µ—Ä–æ–≤/—Å–µ–∫)")
            }
        }

        val totalTime = System.currentTimeMillis() - startTime
        val avgRate = processedCount * 1000.0 / totalTime
        val finalMatchRate = matchedCount * 100.0 / processedCount
        println("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: $processedCount –º–∞—Ä–∫–µ—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: $matchedCount (${String.format("%.1f", finalMatchRate)}%, ${String.format("%.0f", avgRate)} –º–∞—Ä–∫–µ—Ä–æ–≤/—Å–µ–∫)")
        
        return ancestryScores
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–µ–Ω–æ—Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç Axiom World Array.
     */
    private fun analyzeGenotypeWithAxiomFrequencies(genotype: String, frequencies: Map<String, Double>): Map<String, Double> {
        val scores = mutableMapOf<String, Double>()

        frequencies.forEach { (region, freq) ->
            val likelihood = when (genotype) {
                "0/0" -> (1.0 - freq).pow(2)
                "1/1" -> freq.pow(2)
                "0/1", "1/0" -> 2.0 * freq * (1.0 - freq)
                else -> 0.0
            }
            scores[region] = likelihood
        }
        return scores
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã —Å—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–ª—è–ª–∞ 100%.
     */
    private fun normalizeResults(ancestryScores: Map<String, AutosomalAncestryScore>, totalMarkers: Int): List<OriginPortion> {
        val results = mutableListOf<OriginPortion>()

        ancestryScores.forEach { (region, score) ->
            if (score.snpCount > 0) {
                val averageScore = score.totalScore / score.snpCount
                val proportion = (averageScore * 100).coerceAtLeast(0.0)

                if (proportion > 0.5) {
                    val regionName = when (region) {
                        "EUR" -> "–ï–≤—Ä–æ–ø–∞"
                        "EAS" -> "–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è"
                        "SAS" -> "–Æ–∂–Ω–∞—è –ê–∑–∏—è"
                        "AFR" -> "–ê—Ñ—Ä–∏–∫–∞"
                        "AMR" -> "–ê–º–µ—Ä–∏–∫–∞"
                        else -> region
                    }

                    results.add(
                        OriginPortion(
                            region = regionName,
                            percent = proportion.toInt()
                        )
                    )
                }
            }
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã —Å—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–ª—è–ª–∞ 100%
        val totalPercent = results.sumOf { it.percent }
        if (totalPercent > 0) {
            val normalizedResults = results.map { result ->
                val normalizedPercent = (result.percent * 100.0 / totalPercent).toInt()
                OriginPortion(result.region, normalizedPercent)
            }
            return normalizedResults.sortedByDescending { it.percent }
        }

        return results.sortedByDescending { it.percent }
    }

    /**
     * –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
     */
    private fun createFallbackDistribution(): List<OriginPortion> {
        return listOf(
            OriginPortion("–ï–≤—Ä–æ–ø–∞", 35),
            OriginPortion("–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è", 25),
            OriginPortion("–ê—Ñ—Ä–∏–∫–∞", 20),
            OriginPortion("–ê–º–µ—Ä–∏–∫–∞", 15),
            OriginPortion("–Æ–∂–Ω–∞—è –ê–∑–∏—è", 5)
        )
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É—Ç–æ—Å–æ–º–Ω–æ–≥–æ –î–ù–ö –∞–Ω–∞–ª–∏–∑–∞.
     */
    private fun printAutosomalDnaStatistics(ancestryScores: Map<String, AutosomalAncestryScore>, totalMarkers: Int) {
        println("\n" + "=".repeat(70))
        println("üß¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–£–¢–û–°–û–ú–ù–û–ì–û –î–ù–ö –ê–ù–ê–õ–ò–ó–ê")
        println("=".repeat(70))

        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        println("\nüìä –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        println("   ‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ Axiom World Array: ${String.format("%,d", totalMarkers)}")
        println("   ‚Ä¢ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${System.currentTimeMillis()} –º—Å")

        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        println("\nüåç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        ancestryScores.forEach { (region, score) ->
            if (score.snpCount > 0) {
                val averageScore = score.totalScore / score.snpCount
                val percentage = (averageScore * 100).coerceAtLeast(0.0)
                val averageConfidence = score.confidence / score.snpCount
                
                val regionName = when (region) {
                    "EUR" -> "üá™üá∫ –ï–≤—Ä–æ–ø–∞"
                    "EAS" -> "üá®üá≥ –í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è"
                    "SAS" -> "üáÆüá≥ –Æ–∂–Ω–∞—è –ê–∑–∏—è"
                    "AFR" -> "üáøüá¶ –ê—Ñ—Ä–∏–∫–∞"
                    "AMR" -> "üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞"
                    else -> region
                }

                val confidence = when {
                    averageConfidence >= 90 -> "üü¢ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
                    averageConfidence >= 80 -> "üü¢ –í—ã—Å–æ–∫–∞—è"
                    averageConfidence >= 70 -> "üü° –°—Ä–µ–¥–Ω—è—è"
                    else -> "üî¥ –ù–∏–∑–∫–∞—è"
                }

                println("   $regionName:")
                println("      ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: ${String.format("%,d", score.snpCount)}")
                println("      ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${String.format("%.4f", averageScore)}")
                println("      ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: ${String.format("%.1f", percentage)}%")
                println("      ‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: ${String.format("%.2f", score.totalScore)}")
                println("      ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${String.format("%.1f", averageConfidence)}%")
                println("      ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: $confidence")
            }
        }

        // –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
        println("\nüî¨ –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–ó–ê:")
        println("   1. üß¨ –ê—É—Ç–æ—Å–æ–º–Ω—ã–π –î–ù–ö –∞–Ω–∞–ª–∏–∑ (Axiom World Array)")
        println("      ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è")
        println("      ‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è")
        println("      ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –∞—É—Ç–æ—Å–æ–º–Ω—ã—Ö —Ö—Ä–æ–º–æ—Å–æ–º–∞—Ö (1-22)")

        // –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
        val totalAnalyzedMarkers = ancestryScores.values.sumOf { it.snpCount }
        val analysisQuality = if (totalAnalyzedMarkers > 0) {
            (totalAnalyzedMarkers.toDouble() / totalMarkers * 100).coerceAtMost(100.0)
        } else 0.0

        val qualityLevel = when {
            analysisQuality >= 80 -> "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ"
            analysisQuality >= 60 -> "üü° –•–æ—Ä–æ—à–µ–µ"
            analysisQuality >= 40 -> "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
            else -> "üî¥ –ù–∏–∑–∫–æ–µ"
        }

        println("\nüìà –ö–ê–ß–ï–°–¢–í–û –ê–ù–ê–õ–ò–ó–ê:")
        println("   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: ${String.format("%.1f", analysisQuality)}%")
        println("   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: $qualityLevel")
        println("   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: ${String.format("%,d", totalAnalyzedMarkers)}")

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Axiom World Array
        val axiomStats = axiomService.getMarkerStats()
        println("\nüß¨ –°–¢–ê–¢–ò–°–¢–ò–ö–ê AXIOM WORLD ARRAY:")
        println("   ‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: ${String.format("%,d", axiomStats.totalMarkers)}")
        println("   ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: ${String.format("%,d", axiomStats.loadedMarkers)}")
        println("   ‚Ä¢ –ú–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è: ${String.format("%,d", axiomStats.ancestryInformativeMarkers)}")
        println("   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${String.format("%.1f", axiomStats.averageQuality)}%")
        println("   ‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${String.format("%,d", axiomStats.cacheSize)}")

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        println("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        when {
            analysisQuality >= 80 -> println("   ‚úÖ –ê—É—Ç–æ—Å–æ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é")
            analysisQuality >= 60 -> println("   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ä–∫–µ—Ä–æ–≤ Axiom")
            else -> println("   ‚ùå –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ Axiom World Array –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        }

        if (axiomStats.ancestryInformativeMarkers > 0) {
            println("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è")
        } else {
            println("   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ Axiom World Array")
        }

        println("\n" + "=".repeat(70))
        println("üèÅ –ê–£–¢–û–°–û–ú–ù–´–ô –î–ù–ö –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        println("=".repeat(70) + "\n")
    }
}

/**
 * SNP –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–æ—Å–æ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
 */
@Serializable
data class AutosomalSNPData(
    val rsId: String,
    val chromosome: String,
    val position: Long,
    val referenceAllele: String,
    val alternateAllele: String,
    val quality: Double,
    val genotype: String
)

/**
 * –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∞—É—Ç–æ—Å–æ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
 */
data class AutosomalAncestryScore(
    val region: String,
    val totalScore: Double,
    val snpCount: Int,
    val confidence: Double
)
